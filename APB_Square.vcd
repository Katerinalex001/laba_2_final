$date
	Sun Dec 24 16:53:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module APB_Square_tb $end
$var wire 1 ! PWRITE $end
$var wire 32 " PWDATA [31:0] $end
$var wire 1 # PSEL $end
$var wire 1 $ PREADY $end
$var wire 32 % PRDATA_MASTER [31:0] $end
$var wire 32 & PRDATA [31:0] $end
$var wire 1 ' PENABLE $end
$var wire 32 ( PADDR [31:0] $end
$var reg 32 ) PADDR_MASTER [31:0] $end
$var reg 1 * PCLK $end
$var reg 1 + PRESET $end
$var reg 32 , PWDATA_MASTER [31:0] $end
$var reg 1 - PWRITE_MASTER $end
$scope module APB_Square_1 $end
$var wire 1 * PCLK $end
$var wire 1 + PRESET $end
$var wire 1 ! PWRITE $end
$var wire 32 . PWDATA [31:0] $end
$var wire 1 # PSEL $end
$var wire 1 ' PENABLE $end
$var wire 32 / PADDR [31:0] $end
$var parameter 4 0 output_reg_ADDR $end
$var parameter 4 1 storona_a_ADDR $end
$var parameter 4 2 storona_b_ADDR $end
$var reg 32 3 PRDATA [31:0] $end
$var reg 1 $ PREADY $end
$var reg 32 4 output_reg [31:0] $end
$var reg 32 5 storona_a [31:0] $end
$var reg 32 6 storona_b [31:0] $end
$upscope $end
$scope module APB_master_1 $end
$var wire 32 7 PADDR_MASTER [31:0] $end
$var wire 1 * PCLK $end
$var wire 32 8 PRDATA [31:0] $end
$var wire 1 $ PREADY $end
$var wire 1 + PRESET $end
$var wire 32 9 PWDATA_MASTER [31:0] $end
$var wire 1 - PWRITE_MASTER $end
$var reg 32 : PADDR [31:0] $end
$var reg 1 ' PENABLE $end
$var reg 32 ; PRDATA_MASTER [31:0] $end
$var reg 1 # PSEL $end
$var reg 32 < PWDATA [31:0] $end
$var reg 1 ! PWRITE $end
$scope function apb_read $end
$var reg 32 = inp_addr [31:0] $end
$upscope $end
$scope function apb_write $end
$var reg 32 > inp_addr [31:0] $end
$var reg 32 ? inp_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module APB_Square_tb $end
$scope module APB_Square_1 $end
$upscope $end
$scope module APB_master_1 $end
$scope function apb_read $end
$upscope $end
$scope function apb_write $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 2
b0 1
b1000 0
$end
#0
$dumpvars
bx ?
bx >
bx =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 /
b0 .
0-
b0 ,
0+
0*
b0 )
b0 (
0'
b0 &
b0 %
0$
0#
b0 "
0!
$end
#200
1'
1!
b101 "
b101 .
b101 <
1#
b101 ?
b0 >
b101 ,
b101 9
1-
1*
#400
0*
#600
1$
b101 5
1*
#800
0*
#1000
0$
0'
0#
b111 "
b111 .
b111 <
b100 (
b100 /
b100 :
b111 ?
b100 >
b100 )
b100 7
b111 ,
b111 9
1*
#1200
0*
#1400
b100011 4
1$
b111 6
1'
1#
1*
#1600
0*
#1800
0$
0'
0#
b11 "
b11 .
b11 <
b0 (
b0 /
b0 :
b11 ?
b0 >
b0 )
b0 7
b11 ,
b11 9
1*
#2000
0*
#2200
b10101 4
1$
b11 5
1'
1#
1*
#2400
0*
#2600
0$
0'
0#
b0 =
0-
1*
#2800
0*
#3000
b11 %
b11 ;
1$
b11 &
b11 3
b11 8
1'
1#
0!
1*
#3200
0*
#3400
0$
0'
0#
b100 =
b100 )
b100 7
1*
#3600
0*
#3800
b111 %
b111 ;
1$
b111 &
b111 3
b111 8
1'
1#
b100 (
b100 /
b100 :
1*
#4000
0*
#4200
0$
0'
0#
b1000 =
b1000 )
b1000 7
1*
#4400
0*
#4600
b10101 %
b10101 ;
1$
b10101 &
b10101 3
b10101 8
1'
1#
b1000 (
b1000 /
b1000 :
1*
#4800
0*
#5000
0$
0'
0#
1*
#5200
0*
#5400
1$
1'
1#
1*
#5500
